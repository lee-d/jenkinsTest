@NonCPS
def getVulnerabilityReport() {
    def analysis = new XmlSlurper().parse("${workspace}/target/dependency-check-report.xml")

    def highSeverityMap = [:]
    def highestSeverityMap = [:]
    def normalSeverityMap = [:]
    def dependencyCheckMap = [:]
    def blaMap = [:]
    def highSeverityCount = 0
    def highestSeverityCount = 0
    def normalSeverityCount = 0

    analysis.dependencies.dependency.each {
       highSeverityCount = it.vulnerabilities.vulnerability.collect {
         it.severity
       }.count {
          it.severity.text().toLowerCase().equals('high')
       }
       highestSeverityCount = it.vulnerabilities.vulnerability.count {
         it.severity.text().toLowerCase().equals('highest')
       }
       normalSeverityCount = it.vulnerabilities.vulnerability.count {
         it.severity.text().toLowerCase().equals('medium')
       }

       def blabla = it.vulnerabilities.vulnerability.collect {
                         it.severity
                       }
       def desc = ""
       blabla.each {
            desc + it.text()
       }


       def projectName = analysis.projectInfo.artifactID.text()
       highSeverityMap[projectName] = highSeverityCount
       highestSeverityMap[projectName] = highestSeverityCount
       normalSeverityMap[projectName] = normalSeverityCount
       blaMap[projectName] = desc
    }

    dependencyCheckMap['high-severity'] = highSeverityMap
    dependencyCheckMap['highest-severity'] = highestSeverityMap
    dependencyCheckMap['normal-severity'] = normalSeverityMap
    dependencyCheckMap['test'] = blaMap
    return dependencyCheckMap
}

pipeline {
    agent any
    triggers {
        pollSCM 'H/5 * * * *'
        cron 'H H(0-5) * * *'
    }
    environment {
        SERVICE = 'foo'
    }
    stages {
        stage('Maven Build') {
            steps {
                sh "mvn -B clean verify -DskipTests"
                archiveArtifacts artifacts: 'target/*.jar'
                dependencyCheckPublisher pattern: 'target/dependency-check-report.*'

                script {
                    def result = getVulnerabilityReport()
                    step([$class: 'InfluxDbPublisher', target: 'grafana', customPrefix: null, customDataMap: result])
                }
            }
        }
    }
}
