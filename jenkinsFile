@NonCPS
def getVulnerabilityReport() {
    def influxdb = Jenkins.instance.getDescriptorByType(jenkinsci.plugins.influxdb.DescriptorImpl)

    // Create target
    def target = new jenkinsci.plugins.influxdb.models.Target()

    // Set target details
    // Mandatory fields
    target.description = 'grafana'
    target.url = 'http://172.17.0.1:8086'
    target.username = 'admin'
    target.password = 'admin'
    target.database = 'test'
    influxdb.addTarget(target)
    influxdb.save()

    // Write stuff to InfluxDB
    // NOTE! If you have more targets configured in Jenkins, it's safer to add "selectedTarget" parameter to the InfluxDB step to ensure
    // data is sent to the correct target.
    // step([$class: 'InfluxDbPublisher', target: 'myNewTarget', selectedTarget: 'myNewTarget', customPrefix: 'myPrefix', customData: myDataMap])

    // Remove a target by using the target description field value

    def analysis = new XmlSlurper().parse("${workspace}/target/dependency-check-report.xml")
    def projectName = analysis.projectInfo.artifactID.text()

    def dependencyCheckMap = [:]
    def highestSeverityMap = [:]
    def highSeverityMap = [:]
    def normalSeverityMap = [:]
    def highestSeverityCount = 0
    def highSeverityCount = 0
    def normalSeverityCount = 0

    analysis.dependencies.dependency.each {
       highestSeverityCount = highestSeverityCount + it.vulnerabilities.vulnerability.count {
         it.severity.text().toLowerCase().equals('highest')
       }
       highSeverityCount = highSeverityCount + it.vulnerabilities.vulnerability.count {
          it.severity.text().toLowerCase().equals('high')
       }
       normalSeverityCount = normalSeverityCount + it.vulnerabilities.vulnerability.count {
        it.severity.text().toLowerCase().equals('medium')
      }

       highSeverityMap[projectName] = highSeverityCount
       highestSeverityMap[projectName] = highestSeverityCount
       normalSeverityMap[projectName] = normalSeverityCount
    }

    dependencyCheckMap['high-severity'] = highSeverityMap
    dependencyCheckMap['highest-severity'] = highestSeverityMap
    dependencyCheckMap['normal-severity'] = normalSeverityMap

    step([$class: 'InfluxDbPublisher', target: 'grafana', selectedTarget: 'grafana', customPrefix: null, customDataMap: dependencyCheckMap])
}

pipeline {
    agent any
    triggers {
        pollSCM 'H/5 * * * *'
        cron 'H H(0-5) * * *'
    }
    environment {
        SERVICE = 'foo'
    }
    stages {
        stage('Maven Build') {
            steps {
                sh "mvn -B clean verify -DskipTests"
                archiveArtifacts artifacts: 'target/*.jar'
                dependencyCheckPublisher pattern: 'target/dependency-check-report.*'
                getVulnerabilityReport()
            }
        }
    }
}
